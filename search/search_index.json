{
    "docs": [
        {
            "location": "/", 
            "text": "Komposition\n\n\n\nThe video editor built for screencasters\n\n\n\n\nIntroduction\n\n\nInstallation\n\n\nSource Code", 
            "title": "Home"
        }, 
        {
            "location": "/#komposition", 
            "text": "The video editor built for screencasters  Introduction  Installation  Source Code", 
            "title": "Komposition"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nKomposition is an early-stage software project. You should expect some rough\nedges. If you find a bug, or a place where documentation could be better,\nplease \nsubmit an issue on GitHub\n.\n\n\nIf you want to help develop Komposition, look around the reported issues on\nGithub if there's anything you can pick up. However, as this is a highly\nopinionated piece of software, discussion prior to any change is highly\nencouraged. It would be very sad to reject your pull request becuase it\nhasn't been properly planned beforehand.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Komposition is an early-stage software project. You should expect some rough\nedges. If you find a bug, or a place where documentation could be better,\nplease  submit an issue on GitHub .  If you want to help develop Komposition, look around the reported issues on\nGithub if there's anything you can pick up. However, as this is a highly\nopinionated piece of software, discussion prior to any change is highly\nencouraged. It would be very sad to reject your pull request becuase it\nhasn't been properly planned beforehand.", 
            "title": "Contributing"
        }, 
        {
            "location": "/roadmap/", 
            "text": "Roadmap\n\n\nKomposition 0.1.0 has just been released. Although it's very exciting,\nKomposition is lacking some big features. For coming releases, we're hoping\nto include a lot of those features.\n\n\nHave a look at the \n0.2.0\nmilestone\n\non GitHub to see what's planned.\n\n\nIf you have any other suggestions, or want to help with these features,\nplease head over to the \nGitter\nroom\n to discuss them.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/roadmap/#roadmap", 
            "text": "Komposition 0.1.0 has just been released. Although it's very exciting,\nKomposition is lacking some big features. For coming releases, we're hoping\nto include a lot of those features.  Have a look at the  0.2.0\nmilestone \non GitHub to see what's planned.  If you have any other suggestions, or want to help with these features,\nplease head over to the  Gitter\nroom  to discuss them.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/user-guide/installation/", 
            "text": "Installation\n\n\nCurrently, the only way to install Komposition is from source. It can be built\non macOS, Windows, and Linux. If you're not an experienced Haskell developer,\nit's recommended to use\n\nStack\n to build the\napplication. The following instructions will be based on Stack, so go ahead\nand \ninstall that first\n.\n\n\n\n\nUsing another build tool\n\n\nIf you know your way around building Haskell programs, you might want to\nbuild it using Nix or regular Cabal, instead.\n\n\n\n\nGetting the Source Code\n\n\nNext, clone the source code repository using Git.\n\n\ngit clone https://github.com/owickstrom/komposition.git\ncd komposition\n\n\n\n\nAlternatively, if you're not using Git, download a \nZIP\narchive\n:\n\n\nwget https://github.com/owickstrom/komposition/archive/master.zip -O komposition-master.zip\nunzip komposition-master.zip\ncd komposition-master\n\n\n\n\nYou now have the source code. Jump on to the instructions below specific to\nyour operating system.\n\n\nLinux\n\n\nFirst, install the required dependencies:\n\n\nsudo apt-get install \\\n    ffmpeg \\\n    sox \\\n    libgmp-dev \\\n    libavutil-dev \\\n    libavformat-dev \\\n    libavcodec-dev \\\n    libswscale-dev \\\n    libavdevice-dev \\\n    libgirepository1.0-dev \\\n    libgtk-3-dev \\\n    libpango1.0-dev \\\n    libgdk-pixbuf2.0-dev \\\n    libgstreamer1.0-dev \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad\n\n\n\n\n\n\nWarning\n\n\nIf you find additional packages that needs to be installed, please \nsubmit\nan issue on GitHub\n.\n\n\n\n\nNext, build and install the application using Stack:\n\n\nstack install\n\n\n\n\nYou should now have Komposition available:\n\n\n~/.local/bin/komposition\n\n\n\n\nIf you have added \n~/.local/bin\n to your \nPATH\n, run:\n\n\nkomposition\n\n\n\n\nmacOS\n\n\nThese instructions will be available soon.\n\n\nWindows\n\n\nThese instructions will be available soon.\n\n\n# something like this...\npacman -S mingw-w64-x86_64-gstreamer mingw-w64-x86_64-gst-libav mingw-w64-x86_64-gst-plugins-{base,good,bad}\n\n\n\n\nNix/NixOS\n\n\nKomposition is not yet in \nnixpkgs\n, but it\ncan be installed with Nix from an archive on GitHub.\n\n\nFirst, consider installing \nCachix\n and using the\nKomposition binary cache. It's not strictly required, but will save you time\nwaiting on compilation.\n\n\ncachix use komposition\n\n\n\n\nNext, use \nnix-env\n to install Komposition from the \nmaster\n branch:\n\n\nnix-env -iA komposition -f https://github.com/owickstrom/komposition/archive/master.tar.gz\n\n\n\n\nRun it from the command line:\n\n\nkomposition", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#installation", 
            "text": "Currently, the only way to install Komposition is from source. It can be built\non macOS, Windows, and Linux. If you're not an experienced Haskell developer,\nit's recommended to use Stack  to build the\napplication. The following instructions will be based on Stack, so go ahead\nand  install that first .   Using another build tool  If you know your way around building Haskell programs, you might want to\nbuild it using Nix or regular Cabal, instead.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#getting-the-source-code", 
            "text": "Next, clone the source code repository using Git.  git clone https://github.com/owickstrom/komposition.git\ncd komposition  Alternatively, if you're not using Git, download a  ZIP\narchive :  wget https://github.com/owickstrom/komposition/archive/master.zip -O komposition-master.zip\nunzip komposition-master.zip\ncd komposition-master  You now have the source code. Jump on to the instructions below specific to\nyour operating system.", 
            "title": "Getting the Source Code"
        }, 
        {
            "location": "/user-guide/installation/#linux", 
            "text": "First, install the required dependencies:  sudo apt-get install \\\n    ffmpeg \\\n    sox \\\n    libgmp-dev \\\n    libavutil-dev \\\n    libavformat-dev \\\n    libavcodec-dev \\\n    libswscale-dev \\\n    libavdevice-dev \\\n    libgirepository1.0-dev \\\n    libgtk-3-dev \\\n    libpango1.0-dev \\\n    libgdk-pixbuf2.0-dev \\\n    libgstreamer1.0-dev \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad   Warning  If you find additional packages that needs to be installed, please  submit\nan issue on GitHub .   Next, build and install the application using Stack:  stack install  You should now have Komposition available:  ~/.local/bin/komposition  If you have added  ~/.local/bin  to your  PATH , run:  komposition", 
            "title": "Linux"
        }, 
        {
            "location": "/user-guide/installation/#macos", 
            "text": "These instructions will be available soon.", 
            "title": "macOS"
        }, 
        {
            "location": "/user-guide/installation/#windows", 
            "text": "These instructions will be available soon.  # something like this...\npacman -S mingw-w64-x86_64-gstreamer mingw-w64-x86_64-gst-libav mingw-w64-x86_64-gst-plugins-{base,good,bad}", 
            "title": "Windows"
        }, 
        {
            "location": "/user-guide/installation/#nixnixos", 
            "text": "Komposition is not yet in  nixpkgs , but it\ncan be installed with Nix from an archive on GitHub.  First, consider installing  Cachix  and using the\nKomposition binary cache. It's not strictly required, but will save you time\nwaiting on compilation.  cachix use komposition  Next, use  nix-env  to install Komposition from the  master  branch:  nix-env -iA komposition -f https://github.com/owickstrom/komposition/archive/master.tar.gz  Run it from the command line:  komposition", 
            "title": "Nix/NixOS"
        }, 
        {
            "location": "/user-guide/introduction/", 
            "text": "Introduction\n\n\nKomposition\n is the video editor built for screencasters. It lets you focus\non producing and publishing quality content, instead of spending all of your\ntime in complicated video editors. Stop wasting time on manually adjusting\nclip lengths, building still-frame segments, and dragging clips around, and\nenjoy a new screencast editing experience.\n\n\n\n\nKomposition automatically detects scenes in screen capture video,\nautomatically detects sentences in voice-over audio recordings, and features\na high-productivity editing workflow based on keyboard navigation.\n\n\n\n\nAdjust Your Expectations\n\n\nKomposition is a young project with many of its planned features not\nimplemented yet. It will most likely see some bug reports, surprise you\nin various ways, have subpar performance, and be somewhat under-documented\nin the foreseeable future.\n\n\nYou, the brave early adopter, might need to lower your expectations slightly\nif you're coming from Premiere Pro or Final Cut, at least in terms of software\nmaturity. But rest assured, Komposition is going to reward you in the long\nrun.\n\n\nIf you have any questions, please ask \nin the Gitter\nroom\n. If you hit any problem,\nplease \nsubmit an issue on GitHub\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/introduction/#introduction", 
            "text": "Komposition  is the video editor built for screencasters. It lets you focus\non producing and publishing quality content, instead of spending all of your\ntime in complicated video editors. Stop wasting time on manually adjusting\nclip lengths, building still-frame segments, and dragging clips around, and\nenjoy a new screencast editing experience.   Komposition automatically detects scenes in screen capture video,\nautomatically detects sentences in voice-over audio recordings, and features\na high-productivity editing workflow based on keyboard navigation.   Adjust Your Expectations  Komposition is a young project with many of its planned features not\nimplemented yet. It will most likely see some bug reports, surprise you\nin various ways, have subpar performance, and be somewhat under-documented\nin the foreseeable future.  You, the brave early adopter, might need to lower your expectations slightly\nif you're coming from Premiere Pro or Final Cut, at least in terms of software\nmaturity. But rest assured, Komposition is going to reward you in the long\nrun.  If you have any questions, please ask  in the Gitter\nroom . If you hit any problem,\nplease  submit an issue on GitHub .", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/workflow/", 
            "text": "Workflow\n\n\nKomposition is a highly opinionated piece of software, specialized at editing\nscreencasts. As such, it prescribes a specific recording and editing workflow.\nTo reach optimal results and have a nice experience doing so, please follow\nthe guidelines outlined below.\n\n\nRecording\n\n\nIt all begins with the recording. For Komposition to be able to automatically\nclassify the parts of your screencast, and for you to be able to compose\nthose parts in a fine-grained and effortless manner, your recording needs to\nbe done in a certain way.\n\n\n\n\nWrite a detailed script before recording anything.\n\n\nThis is paramount for the Komposition workflow. Also, it's generally good\nadvice that will save you loads of time, even if you're not using Komposition.\nYour script should be detailed enough for you to record video and audio\nseparately based off it.\n\n\nRecord video and audio separately.\n\n\nVideo and audio recorded simultaneously is hard to separate and work with\nindependently. The microphone easily picks up the sound of you typing or\nclicking the mouse, making the audio track inherently tied to the video track.\nIf you're not a native English speaker, recording\nFinally, it's easier to get a clean audio track without computer fans humming\nif you record it separately.\n\n\nTake long breaks, two seconds or more, between the parts in your screencast.\n\n\nFor the scene and sentence classifiers to pick up the different segments,\nyou need to take long explicit breaks. A \"part\" of a screencast should be a short\nsequence of actions, and the corresponding sentence, or couple of sentences, describing\nthat action. The more fine-grained you make your parts, the more control and comfort\nyou'll have when editing the screencast in Komposition.\n\n\n\n\nComposing Parts\n\n\nNow that you have recored your video and audio, you can\n\nimport\n using automatic classification. This will\ngive you a \nlibrary\n loaded with fine-grained parts of\nvideo and audio. Using the \ncommands\n you compose your\nparts in \nsequences and parallels\n into a complete\nscreencast.", 
            "title": "Workflow"
        }, 
        {
            "location": "/user-guide/workflow/#workflow", 
            "text": "Komposition is a highly opinionated piece of software, specialized at editing\nscreencasts. As such, it prescribes a specific recording and editing workflow.\nTo reach optimal results and have a nice experience doing so, please follow\nthe guidelines outlined below.", 
            "title": "Workflow"
        }, 
        {
            "location": "/user-guide/workflow/#recording", 
            "text": "It all begins with the recording. For Komposition to be able to automatically\nclassify the parts of your screencast, and for you to be able to compose\nthose parts in a fine-grained and effortless manner, your recording needs to\nbe done in a certain way.   Write a detailed script before recording anything.  This is paramount for the Komposition workflow. Also, it's generally good\nadvice that will save you loads of time, even if you're not using Komposition.\nYour script should be detailed enough for you to record video and audio\nseparately based off it.  Record video and audio separately.  Video and audio recorded simultaneously is hard to separate and work with\nindependently. The microphone easily picks up the sound of you typing or\nclicking the mouse, making the audio track inherently tied to the video track.\nIf you're not a native English speaker, recording\nFinally, it's easier to get a clean audio track without computer fans humming\nif you record it separately.  Take long breaks, two seconds or more, between the parts in your screencast.  For the scene and sentence classifiers to pick up the different segments,\nyou need to take long explicit breaks. A \"part\" of a screencast should be a short\nsequence of actions, and the corresponding sentence, or couple of sentences, describing\nthat action. The more fine-grained you make your parts, the more control and comfort\nyou'll have when editing the screencast in Komposition.", 
            "title": "Recording"
        }, 
        {
            "location": "/user-guide/workflow/#composing-parts", 
            "text": "Now that you have recored your video and audio, you can import  using automatic classification. This will\ngive you a  library  loaded with fine-grained parts of\nvideo and audio. Using the  commands  you compose your\nparts in  sequences and parallels  into a complete\nscreencast.", 
            "title": "Composing Parts"
        }, 
        {
            "location": "/user-guide/concepts/commands/", 
            "text": "Commands\n\n\nCommands\n are issued by you, the user of Komposition, to navigate and\nmodify, the timeline and other views of the application. The following table\nlists some of the central commands you can issue, and their key bindings.\nMost commands can also be issued by using the top-level menu bar.\n\n\n\n\n\n\n\n\nCommand\n\n\nMode\n\n\nKey Binding\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHelp\n\n\nAll\n\n\n?\n\n\nDisplay key bindings help in the current mode\n\n\n\n\n\n\nSplit\n\n\nTimeline\n\n\ns\n\n\nSplit the currently focused composition, if possible\n\n\n\n\n\n\nDelete\n\n\nTimeline\n\n\nd\n\n\nDelete the currently focused composition\n\n\n\n\n\n\nImport\n\n\nTimeline\n\n\ni\n\n\nStart a new asset import\n\n\n\n\n\n\nRender\n\n\nTimeline\n\n\nr\n\n\nRender the project to a video file\n\n\n\n\n\n\nPreview\n\n\nTimeline\n\n\nSpace\n\n\nPreview the currently focused composition\n\n\n\n\n\n\nUndo\n\n\nTimeline\n\n\nu\n\n\nUndo the last command\n\n\n\n\n\n\nRedo\n\n\nTimeline\n\n\nCtrl\n + \nr\n\n\nRedo the last undone command\n\n\n\n\n\n\nExit\n\n\nTimeline\n\n\nq\n\n\nExit the Komposition application\n\n\n\n\n\n\nCancel\n\n\nLibrary, Import\n\n\nq\n\n\nCancel/exit the current mode\n\n\n\n\n\n\n\n\nThere are more commands not listed in this table. Press \n?\n in\nKomposition to see the full listing.\n\n\nKey Sequences\n\n\nTo \nprepend\n and \nappend\n clips and gaps, there are key sequence bindings\navailable. To prepend, you generally start by pressing \np\n and then\na key for the type of clip or gap you want to prepend. To append, start with\nthe \na\n key. Clips are specified with the \nc\n key, and gaps\nwith the \ng\n key.\n\n\nWhen a video or audio track is focused, you press two keys:\n\n\n\n\nprepend (\np\n) or append (\na\n)\n\n\nclip (\nc\n) or gap (\ng\n)\n\n\n\n\nWhen a parallel is focused, you need to also specify if it's the video track\nor audio track you want to prepend or append to. The full key sequence then\nconsists of three keys:\n\n\n\n\nprepend (\np\n) or append (\na\n)\n\n\nvideo (\nv\n) or audio track (\na\n)\n\n\nclip (\nc\n) or gap (\ng\n)\n\n\n\n\nThere are variations for prepending at the leftmost position (\nP\n),\nand appending at the rightmost position (\nA\n). And again, all key\nsequences are not listed in this document. Press \n?\n in Komposition\nto see the full listing.", 
            "title": "Commands"
        }, 
        {
            "location": "/user-guide/concepts/commands/#commands", 
            "text": "Commands  are issued by you, the user of Komposition, to navigate and\nmodify, the timeline and other views of the application. The following table\nlists some of the central commands you can issue, and their key bindings.\nMost commands can also be issued by using the top-level menu bar.     Command  Mode  Key Binding  Description      Help  All  ?  Display key bindings help in the current mode    Split  Timeline  s  Split the currently focused composition, if possible    Delete  Timeline  d  Delete the currently focused composition    Import  Timeline  i  Start a new asset import    Render  Timeline  r  Render the project to a video file    Preview  Timeline  Space  Preview the currently focused composition    Undo  Timeline  u  Undo the last command    Redo  Timeline  Ctrl  +  r  Redo the last undone command    Exit  Timeline  q  Exit the Komposition application    Cancel  Library, Import  q  Cancel/exit the current mode     There are more commands not listed in this table. Press  ?  in\nKomposition to see the full listing.", 
            "title": "Commands"
        }, 
        {
            "location": "/user-guide/concepts/commands/#key-sequences", 
            "text": "To  prepend  and  append  clips and gaps, there are key sequence bindings\navailable. To prepend, you generally start by pressing  p  and then\na key for the type of clip or gap you want to prepend. To append, start with\nthe  a  key. Clips are specified with the  c  key, and gaps\nwith the  g  key.  When a video or audio track is focused, you press two keys:   prepend ( p ) or append ( a )  clip ( c ) or gap ( g )   When a parallel is focused, you need to also specify if it's the video track\nor audio track you want to prepend or append to. The full key sequence then\nconsists of three keys:   prepend ( p ) or append ( a )  video ( v ) or audio track ( a )  clip ( c ) or gap ( g )   There are variations for prepending at the leftmost position ( P ),\nand appending at the rightmost position ( A ). And again, all key\nsequences are not listed in this document. Press  ?  in Komposition\nto see the full listing.", 
            "title": "Key Sequences"
        }, 
        {
            "location": "/user-guide/concepts/importing/", 
            "text": "Importing\n\n\nTo import media files, video or audio, into your \nlibrary\n, press\nthe \ni\n key or click \nImport Assets\n in the \nProject\n top menu. You'll\nsee a modal dialog.\n\n\nThe first control selects a file to import. Second, you'll see a checkbox.\nCheck this if you want to automatically classify scenes when importing video,\nor automatically classify sentences when importing audio. Finally, click\nthe \"Import\" button to start the process. It can take some time, so go grab\na cup of coffee or tea.\n\n\nScene and Sentence Classification\n\n\nAutomatically classifying scenes in a video means that Komposition will\nanalyze the original video file and figure out in which segments there are\nmovement and action in the video. Segments where nothing is happening are\ndisregarded. When imported into the library, each segment with movement ends\nup as a separate asset representing that \nscene\n.\n\n\nSimilarly, audio files can be classified to find spoken sentences.\nKomposition will analyze the original audio file and find the segments where\nthe voiceover audio is silent, and disregard those segments. When imported\ninto the library, each segment with non-silence ends up as a separate asset\nrepresenting that \nsentence\n, or passage.\n\n\nRecording and Workflow\n\n\nScene and sentence classification is closely tied to the workflow and\nrecording techniques prescribed by Komposition. To enjoy good results using\nKomposition, make sure to \nfollow the guidelines\n.", 
            "title": "Importing"
        }, 
        {
            "location": "/user-guide/concepts/importing/#importing", 
            "text": "To import media files, video or audio, into your  library , press\nthe  i  key or click  Import Assets  in the  Project  top menu. You'll\nsee a modal dialog.  The first control selects a file to import. Second, you'll see a checkbox.\nCheck this if you want to automatically classify scenes when importing video,\nor automatically classify sentences when importing audio. Finally, click\nthe \"Import\" button to start the process. It can take some time, so go grab\na cup of coffee or tea.", 
            "title": "Importing"
        }, 
        {
            "location": "/user-guide/concepts/importing/#scene-and-sentence-classification", 
            "text": "Automatically classifying scenes in a video means that Komposition will\nanalyze the original video file and figure out in which segments there are\nmovement and action in the video. Segments where nothing is happening are\ndisregarded. When imported into the library, each segment with movement ends\nup as a separate asset representing that  scene .  Similarly, audio files can be classified to find spoken sentences.\nKomposition will analyze the original audio file and find the segments where\nthe voiceover audio is silent, and disregard those segments. When imported\ninto the library, each segment with non-silence ends up as a separate asset\nrepresenting that  sentence , or passage.", 
            "title": "Scene and Sentence Classification"
        }, 
        {
            "location": "/user-guide/concepts/importing/#recording-and-workflow", 
            "text": "Scene and sentence classification is closely tied to the workflow and\nrecording techniques prescribed by Komposition. To enjoy good results using\nKomposition, make sure to  follow the guidelines .", 
            "title": "Recording and Workflow"
        }, 
        {
            "location": "/user-guide/concepts/library/", 
            "text": "Library\n\n\nThe library contains all your import media assets. Depending on how you\nimport assets, and if it's video or audio, they are stored differently.\n\n\nVideo Assets\n\n\nOriginal video files are not copied into the project directory when imported\ninto the library. Instead, the library only stores the file path and metadata\nabout the original video file.\n\n\n\n\nWarning\n\n\nAs the video asset is referring to an original somewhere on your\nfilesystem, if you move or delete the original file it will break\nKomposition. A file path resolution mechanism should be added in a\nfuture version.\n\n\n\n\nIn addition to storing the metadata about the original file, a proxy media\nfile is created when importing. This is lower-resolution video file that is\nused in scene classification, and when previewing, to improve performance\nand keep memory usage down.\n\n\nVideo assets produced by the scene classifier are stored in a similar way.\nThey consist of the original file path and the start and end timestamps of\nthe classified scene.\n\n\nAudio Assets\n\n\nLike video assets, regular audio assets consist of a file path specifying the\noriginal audio file, and metadata. However, if you import with sentence\nclassification, the sentences are split into new audio files stored in the\nproject working directory.\n\n\n\n\nNote\n\n\nSentence classification producing new audio files in the project working\ndirectory is a technical consequence of the audio classification\nimplementation. In a future version of Komposition it should work just\nas video scene classification, i.e. not producing new audio files, but\nreferring to the original with start and end timestamp.", 
            "title": "Library"
        }, 
        {
            "location": "/user-guide/concepts/library/#library", 
            "text": "The library contains all your import media assets. Depending on how you\nimport assets, and if it's video or audio, they are stored differently.", 
            "title": "Library"
        }, 
        {
            "location": "/user-guide/concepts/library/#video-assets", 
            "text": "Original video files are not copied into the project directory when imported\ninto the library. Instead, the library only stores the file path and metadata\nabout the original video file.   Warning  As the video asset is referring to an original somewhere on your\nfilesystem, if you move or delete the original file it will break\nKomposition. A file path resolution mechanism should be added in a\nfuture version.   In addition to storing the metadata about the original file, a proxy media\nfile is created when importing. This is lower-resolution video file that is\nused in scene classification, and when previewing, to improve performance\nand keep memory usage down.  Video assets produced by the scene classifier are stored in a similar way.\nThey consist of the original file path and the start and end timestamps of\nthe classified scene.", 
            "title": "Video Assets"
        }, 
        {
            "location": "/user-guide/concepts/library/#audio-assets", 
            "text": "Like video assets, regular audio assets consist of a file path specifying the\noriginal audio file, and metadata. However, if you import with sentence\nclassification, the sentences are split into new audio files stored in the\nproject working directory.   Note  Sentence classification producing new audio files in the project working\ndirectory is a technical consequence of the audio classification\nimplementation. In a future version of Komposition it should work just\nas video scene classification, i.e. not producing new audio files, but\nreferring to the original with start and end timestamp.", 
            "title": "Audio Assets"
        }, 
        {
            "location": "/user-guide/concepts/navigation/", 
            "text": "Navigation\n\n\nTo navigate the timeline in a Komposition project, you modify the \nfocus\n.\nThe focus describes the current part of the timeline you're focusing. It is\nmodified using movement commands, such as the \"Focus Left\" and \"Focus Up\"\ncommands.\n\n\nVisually, it's represented with a white border around the focused\ntimeline part. For example:\n\n\n\n\n\n\nFocusing a sequence:\n\n\n\n\n\n\n\n\nFocusing a parallel:\n\n\n\n\n\n\n\n\nFocusing a video clip:\n\n\n\n\n\n\n\n\nKey Bindings\n\n\nNavigation is mean to be keyboard-driven, in that you use your arrow keys or\nthe \nh\nj\nk\nl\n keys to move around,\nlike in \nVim\n. You can also click any clip or gap in a\nparallel to move directly to it.\n\n\n\n\nNote\n\n\nThere's currently no way to focus sequences or parallels using the mouse,\nbut this should be addressed in the future.", 
            "title": "Navigation"
        }, 
        {
            "location": "/user-guide/concepts/navigation/#navigation", 
            "text": "To navigate the timeline in a Komposition project, you modify the  focus .\nThe focus describes the current part of the timeline you're focusing. It is\nmodified using movement commands, such as the \"Focus Left\" and \"Focus Up\"\ncommands.  Visually, it's represented with a white border around the focused\ntimeline part. For example:    Focusing a sequence:     Focusing a parallel:     Focusing a video clip:", 
            "title": "Navigation"
        }, 
        {
            "location": "/user-guide/concepts/navigation/#key-bindings", 
            "text": "Navigation is mean to be keyboard-driven, in that you use your arrow keys or\nthe  h j k l  keys to move around,\nlike in  Vim . You can also click any clip or gap in a\nparallel to move directly to it.   Note  There's currently no way to focus sequences or parallels using the mouse,\nbut this should be addressed in the future.", 
            "title": "Key Bindings"
        }, 
        {
            "location": "/user-guide/concepts/preview/", 
            "text": "Preview\n\n\nWhen you're working with your timeline, adding clips and gaps, arranging them\nin sequences and parallels, you may want to preview the rendered result. Doing\na full \nrender\n can take some time, so instead you should use\nthe preview functionality.\n\n\n\n\nWhen focusing a sequence or a parallel, press the space bar on your keyboard\nto open a preview player. You can cancel the preview at any point by pressing\nthe escape key, or by closing the window with your mouse.", 
            "title": "Preview"
        }, 
        {
            "location": "/user-guide/concepts/preview/#preview", 
            "text": "When you're working with your timeline, adding clips and gaps, arranging them\nin sequences and parallels, you may want to preview the rendered result. Doing\na full  render  can take some time, so instead you should use\nthe preview functionality.   When focusing a sequence or a parallel, press the space bar on your keyboard\nto open a preview player. You can cancel the preview at any point by pressing\nthe escape key, or by closing the window with your mouse.", 
            "title": "Preview"
        }, 
        {
            "location": "/user-guide/concepts/projects/", 
            "text": "Projects\n\n\nIn Komposition, the top-level concept is the \nproject\n. The following are all\npart of a project:\n\n\n\n\nthe timeline\n\n\nthe current focus\n\n\nthe library with its media assets\n\n\nvideo rendering settings\n\n\nproxy media settings\n\n\ndirectory path to store intermediate files in\n\n\n\n\nAll these things belong to the project. Very important to note, however, is\nthat in the current version of Komposition projects are \nimplicit\n. When\nyou start the application a new project is implicitly created for you. There\nis no way to save and reopen projects, so when you exit the application your\nimplicit project will be lost.\n\n\n\n\nNote\n\n\nSupport for explicitly creating, saving, and reopening projects is planned for future versions of Komposition.", 
            "title": "Projects"
        }, 
        {
            "location": "/user-guide/concepts/projects/#projects", 
            "text": "In Komposition, the top-level concept is the  project . The following are all\npart of a project:   the timeline  the current focus  the library with its media assets  video rendering settings  proxy media settings  directory path to store intermediate files in   All these things belong to the project. Very important to note, however, is\nthat in the current version of Komposition projects are  implicit . When\nyou start the application a new project is implicitly created for you. There\nis no way to save and reopen projects, so when you exit the application your\nimplicit project will be lost.   Note  Support for explicitly creating, saving, and reopening projects is planned for future versions of Komposition.", 
            "title": "Projects"
        }, 
        {
            "location": "/user-guide/concepts/rendering/", 
            "text": "Rendering\n\n\nWhen you have finished edited and are happy with your project, it's time to\nrender. Press the \nr\n button on your keyboard, or click the \"Render\"\nbutton under the \"Project\" top menu. A file selector will open, in which you\ndecide where the rendered file should be saved and what file name it should\nhave.\n\n\n\n\nThe rendering can take some time, so this is a good time to get that second\ncup of coffee or tea.", 
            "title": "Rendering"
        }, 
        {
            "location": "/user-guide/concepts/rendering/#rendering", 
            "text": "When you have finished edited and are happy with your project, it's time to\nrender. Press the  r  button on your keyboard, or click the \"Render\"\nbutton under the \"Project\" top menu. A file selector will open, in which you\ndecide where the rendered file should be saved and what file name it should\nhave.   The rendering can take some time, so this is a good time to get that second\ncup of coffee or tea.", 
            "title": "Rendering"
        }, 
        {
            "location": "/user-guide/concepts/timeline/", 
            "text": "Timeline\n\n\nA project in Komposition has a \ntimeline\n, where you place your video and\naudio parts you want to render to a video file. The timeline is a tree\nstructure, with a fixed depth, that can be described as follows:\n\n\n\n\nA timeline contains one or more child \nsequences\n.\n\n\nA sequence contains one or more child \nparallels\n, where each child\n  is played sequentially in order.\n\n\nA parallel contains a video track and an audio \ntrack\n, where the\n  video and audio tracks are played in parallel (simultaneously). The\n  longest track defines the length of the parallel.\n\n\n\n\nSequences\n\n\nSequences are used to compose parallels that belong together, forming a\ncohesive part, or chapter, of your screencast. Parallels inside a sequence\nare played in sequence. By placing video and audio parts in separate\nparallels inside a sequence, you can synchronize the start of video and\naudio.\n\n\nParallels\n\n\nParallels are used to play video and audio tracks in parallel. The parts\nwithin a track play in sequence, until the end of the longest track. This\nmeans that if the audio parts form a longer track than the video parts, the\nvideo will be extended with still frames. Correspondingly, if the video track\nis longer, the audio track will be silent in the end.\n\n\nVideo \n Audio Parts\n\n\nVideo and audio parts added to a track are either clips from the\n\nlibrary\n, or \ngaps\n. A clip is a slice of some original media\nfile. A video gap is a still frame segment, and an audio gap is simply\nsilence.\n\n\nExamples\n\n\n\n\nIf you want video clip \nv1\n to start at exactly the same time as\n  audio clip \na1\n, put them both in the beginning of a parallel.\n\n\nIf you want video clip \nv1\n and audio clip \na1\n to play simultaneously, and when\n  they end play video clip \nv2\n, put \nv1\n and \na1\n in one parallel followed by\n  a parallel containing only \nv2\n.\n\n\nIf you want video clip \nv1\n to play with silence, and then play audio clip\n  \na1\n together with video clip \nv2\n, put \nv1\n in a parallel, and \nv2\n and \na1\n\n  in another parallel.\n\n\nIf you want to play video clip \nv1\n together with audio clip \na1\n, but start\n  \na1\n after two seconds, put \nv1\n, a two second audio gap, and \na1\n in a\n  parallel.", 
            "title": "Timeline"
        }, 
        {
            "location": "/user-guide/concepts/timeline/#timeline", 
            "text": "A project in Komposition has a  timeline , where you place your video and\naudio parts you want to render to a video file. The timeline is a tree\nstructure, with a fixed depth, that can be described as follows:   A timeline contains one or more child  sequences .  A sequence contains one or more child  parallels , where each child\n  is played sequentially in order.  A parallel contains a video track and an audio  track , where the\n  video and audio tracks are played in parallel (simultaneously). The\n  longest track defines the length of the parallel.", 
            "title": "Timeline"
        }, 
        {
            "location": "/user-guide/concepts/timeline/#sequences", 
            "text": "Sequences are used to compose parallels that belong together, forming a\ncohesive part, or chapter, of your screencast. Parallels inside a sequence\nare played in sequence. By placing video and audio parts in separate\nparallels inside a sequence, you can synchronize the start of video and\naudio.", 
            "title": "Sequences"
        }, 
        {
            "location": "/user-guide/concepts/timeline/#parallels", 
            "text": "Parallels are used to play video and audio tracks in parallel. The parts\nwithin a track play in sequence, until the end of the longest track. This\nmeans that if the audio parts form a longer track than the video parts, the\nvideo will be extended with still frames. Correspondingly, if the video track\nis longer, the audio track will be silent in the end.", 
            "title": "Parallels"
        }, 
        {
            "location": "/user-guide/concepts/timeline/#video-audio-parts", 
            "text": "Video and audio parts added to a track are either clips from the library , or  gaps . A clip is a slice of some original media\nfile. A video gap is a still frame segment, and an audio gap is simply\nsilence.", 
            "title": "Video &amp; Audio Parts"
        }, 
        {
            "location": "/user-guide/concepts/timeline/#examples", 
            "text": "If you want video clip  v1  to start at exactly the same time as\n  audio clip  a1 , put them both in the beginning of a parallel.  If you want video clip  v1  and audio clip  a1  to play simultaneously, and when\n  they end play video clip  v2 , put  v1  and  a1  in one parallel followed by\n  a parallel containing only  v2 .  If you want video clip  v1  to play with silence, and then play audio clip\n   a1  together with video clip  v2 , put  v1  in a parallel, and  v2  and  a1 \n  in another parallel.  If you want to play video clip  v1  together with audio clip  a1 , but start\n   a1  after two seconds, put  v1 , a two second audio gap, and  a1  in a\n  parallel.", 
            "title": "Examples"
        }
    ]
}